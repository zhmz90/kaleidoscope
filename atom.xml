<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Compiler]]></title>
  <link href="http://zhmz90.github.io/kaleidoscope/atom.xml" rel="self"/>
  <link href="http://zhmz90.github.io/kaleidoscope/"/>
  <updated>2015-09-06T14:48:48+08:00</updated>
  <id>http://zhmz90.github.io/kaleidoscope/</id>
  <author>
    <name><![CDATA[zhmz90]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Conclusion and Other Userful LLVM Tidbits]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/conclusion-and-other-userful-llvm-tidbits/"/>
    <updated>2015-09-06T10:59:31+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/conclusion-and-other-userful-llvm-tidbits</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Information]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/debug-information/"/>
    <updated>2015-09-06T10:59:13+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/debug-information</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutable Variables / SSA Construction]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/mutable-variables-slash-ssa-construction/"/>
    <updated>2015-09-06T10:59:03+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/mutable-variables-slash-ssa-construction</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User-defined Operators]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/user-defined-operators/"/>
    <updated>2015-09-06T10:58:43+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/user-defined-operators</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Control Flow]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/control-flow/"/>
    <updated>2015-09-06T10:58:24+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/control-flow</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JIT and Opitmizer Support]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/jit-and-opitmizer-support/"/>
    <updated>2015-09-06T10:58:16+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/jit-and-opitmizer-support</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Generation to LLVM IR]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/code-generation-to-llvm-ir/"/>
    <updated>2015-09-06T10:57:51+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/code-generation-to-llvm-ir</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parser and AST]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/parser-and-ast/"/>
    <updated>2015-09-06T10:57:37+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/parser-and-ast</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lexer]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/lexer/"/>
    <updated>2015-09-06T10:57:21+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/lexer</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span> (lexer.cpp)</span> <a href='http://zhmz90.github.io/kaleidoscope/downloads/code/lexer.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">enum</span> <span class="n">Token</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tok_eof</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="n">tok_def</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="n">tok_extern</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="n">tok_identifier</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="n">tok_number</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">IdentifierStr</span><span class="p">;</span> <span class="c1">// tok_identifier</span>
</span><span class='line'><span class="k">static</span> <span class="kt">double</span> <span class="n">NumVal</span><span class="p">;</span> <span class="c1">// tok_number</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">get_tok</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">LastChar</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// skip any whitespace</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">isspace</span><span class="p">(</span><span class="n">LastChar</span><span class="p">))</span>
</span><span class='line'>        <span class="n">LastChar</span> <span class="o">=</span> <span class="n">getChar</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isalpha</span><span class="p">(</span><span class="n">LastChar</span><span class="p">))</span> <span class="c1">// identifier:[a-zA-z][a-zA-Z]*</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">IdentifierStr</span> <span class="o">=</span> <span class="n">LastChar</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">isalnum</span><span class="p">(</span><span class="n">LastChar</span> <span class="o">=</span> <span class="n">getChar</span><span class="p">()))</span> <span class="c1">// [a-zA-z][a-zA-Z0-9]*</span>
</span><span class='line'>            <span class="n">IdentifierStr</span> <span class="o">+=</span> <span class="n">LastChar</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">IdentifierStr</span> <span class="o">==</span> <span class="s">&quot;def&quot;</span><span class="p">)</span> <span class="k">return</span> <span class="n">tok_def</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">IdentifierStr</span> <span class="o">==</span> <span class="s">&quot;extern&quot;</span><span class="p">)</span> <span class="k">return</span> <span class="n">tok_extern</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tok_identifier</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">isdigit</span><span class="p">(</span><span class="n">LastChar</span><span class="p">)</span> <span class="o">||</span> <span class="n">LastChar</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">NumStr</span><span class="p">;</span>
</span><span class='line'>        <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NumStr</span> <span class="o">+=</span> <span class="n">LastChar</span><span class="p">;</span>
</span><span class='line'>            <span class="n">LastChar</span> <span class="o">=</span> <span class="n">getChar</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">isdigit</span><span class="p">(</span><span class="n">LastChar</span><span class="p">()</span> <span class="o">||</span> <span class="n">LastChar</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NumVal</span> <span class="o">=</span> <span class="n">strtod</span><span class="p">(</span><span class="n">NumStr</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tok_number</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">LastChar</span> <span class="o">==</span> <span class="sc">&#39;#&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="n">LastChar</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">LastChar</span> <span class="o">!=</span> <span class="n">EOF</span> <span class="o">&amp;&amp;</span> <span class="n">LastChar</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span> <span class="o">&amp;&amp;</span>  <span class="n">LastChar</span> <span class="o">!=</span> <span class="sc">&#39;\r&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">LastChar</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">gettok</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">LastChar</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tok_eof</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ThisChar</span> <span class="o">=</span> <span class="n">LastChar</span><span class="p">;</span>
</span><span class='line'>    <span class="n">LastChar</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ThisChar</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>demo:</p>

<p><img class="left" src="http://zhmz90.github.io/kaleidoscope/images/demo_lexer.jpg" width="350" height="350" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kaleidoscope: A Toy Language]]></title>
    <link href="http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/kaleidoscope-a-toy-language/"/>
    <updated>2015-09-06T10:05:45+08:00</updated>
    <id>http://zhmz90.github.io/kaleidoscope/blog/2015/09/06/kaleidoscope-a-toy-language</id>
    <content type="html"><![CDATA[<p>The Basic Language</p>

<p>The Lexer</p>

<p>Parser and AST</p>

<p>Code generation to LLVM IR</p>

<p>JIT and Optimizer Support</p>

<p>control flow</p>

<p>user-defined operators</p>

<p>mutable variables / SSA construction</p>

<p>Debug information</p>

<p>conclusion and other userful LLVM tidbits</p>
]]></content>
  </entry>
  
</feed>
